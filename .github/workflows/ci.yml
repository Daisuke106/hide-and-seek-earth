name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '22'

jobs:
  # Laravel Backend Tests
  backend-tests:
    name: Backend Tests (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, mysql, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Copy environment file
        run: cp .env.example .env

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Generate application key
        run: php artisan key:generate

      - name: Create SQLite database
        run: touch database/database.sqlite

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

      - name: Run tests with coverage
        run: php artisan test --coverage --min=30
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

      - name: Upload coverage reports to Codecov
        if: matrix.php == '8.2'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # React Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: hns-frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./hns-frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./hns-frontend
        run: npm run lint --if-present

      - name: Run Prettier check
        working-directory: ./hns-frontend
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Run TypeScript check
        working-directory: ./hns-frontend
        run: npx tsc --noEmit

      - name: Run tests
        working-directory: ./hns-frontend
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./hns-frontend/coverage
          flags: frontend
          name: frontend-coverage

      - name: Build application
        working-directory: ./hns-frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: hns-frontend/build/
          retention-days: 7

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
          coverage: none

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run PHP CS Fixer (dry run)
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose || true

      - name: Run Laravel Pint (dry run)
        run: vendor/bin/pint --test || true

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse --memory-limit=2G || true

      - name: Run Larastan
        run: vendor/bin/phpstan analyse --memory-limit=2G --configuration=phpstan.neon || true

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, mysql, pdo_mysql

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: hns-frontend/package-lock.json

      - name: Install backend dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      - name: Install frontend dependencies
        working-directory: ./hns-frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./hns-frontend
        run: npm run build

      - name: Setup Laravel
        run: |
          cp .env.example .env
          php artisan key:generate
          php artisan migrate --force
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password

      - name: Run integration tests
        run: php artisan test --testsuite=Feature
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: password